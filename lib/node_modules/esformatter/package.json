{
  "name": "esformatter",
  "version": "0.7.2",
  "description": "ECMAScript code beautifier/formatter",
  "main": "lib/esformatter.js",
  "bin": {
    "esformatter": "./bin/esformatter"
  },
  "scripts": {
    "test": "node test/runner.js",
    "lint": "jshint lib/*.js lib/**/*.js test/*.js",
    "format": "esformatter -i 'lib/**/*.js'"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/millermedeiros/esformatter.git"
  },
  "bugs": {
    "url": "https://github.com/millermedeiros/esformatter/issues"
  },
  "directories": {
    "doc": "./doc",
    "bin": "./bin",
    "lib": "./lib"
  },
  "keywords": [
    "beautifier",
    "beautify",
    "formatter",
    "ecmascript",
    "javascript",
    "syntax",
    "source",
    "esprima"
  ],
  "author": {
    "name": "Miller Medeiros",
    "url": "http://blog.millermedeiros.com/"
  },
  "devDependencies": {
    "chai": "1.4",
    "esformatter-pipe-test": "file:test/pipe",
    "esformatter-test-plugin": "file:test/plugin",
    "jshint": "~2.3.0",
    "mocha": "https://github.com/millermedeiros/mocha/tarball/latest",
    "mockery": "^1.4.0"
  },
  "dependencies": {
    "debug": "^0.7.4",
    "disparity": "^2.0.0",
    "espree": "^1.12.3",
    "glob": "^5.0.3",
    "minimist": "^1.1.1",
    "mout": ">=0.9 <2.0",
    "npm-run": "^1.1.1",
    "resolve": "^1.1.5",
    "rocambole": ">=0.6 <2.0",
    "rocambole-indent": "^2.0.4",
    "rocambole-linebreak": "^1.0.0",
    "rocambole-node": "~1.0",
    "rocambole-token": "^1.1.2",
    "rocambole-whitespace": "^1.0.0",
    "semver": "~2.2.1",
    "stdin": "*",
    "strip-json-comments": "~0.1.1",
    "supports-color": "^1.3.1",
    "user-home": "^2.0.0"
  },
  "esformatter": {
    "root": true
  },
  "license": "MIT",
  "readme": "# esformatter\n\n[![Build Status](https://secure.travis-ci.org/millermedeiros/esformatter.svg?branch=master)](https://travis-ci.org/millermedeiros/esformatter)\n\nECMAScript code beautifier/formatter.\n\n[Live preview on Requirebin](http://requirebin.com/embed?gist=0d67452e01754269660f)\n\n\n## Important\n\nThis tool is still missing support for many important features. Please report\nany bugs you find, the code is only as good as the test cases. Feature requests\nare very welcome.\n\n**We are looking for [contributors](https://github.com/millermedeiros/esformatter/blob/master/CONTRIBUTING.md)!!**\n\n\n\n## Why?\n\n[jsbeautifier.org](http://jsbeautifier.org/) doesn't have enough options and\nnot all IDEs/Editors have a good JavaScript code formatter. I would like to\nhave a command line tool (and standalone lib) as powerful/flexible as the\n[WebStorm](http://www.jetbrains.com/webstorm/) and\n[FDT](http://fdt.powerflasher.com/) code formatters so that it can be plugged\ninto any editor and reused by other tools like\n[escodegen](https://github.com/Constellation/escodegen/).\n\nFor more reasoning behind it and history of the project see: [esformatter\n& rocambole](http://blog.millermedeiros.com/esformatter-rocambole/)\n\n\n\n## How?\n\nThis tool uses [rocambole](https://github.com/millermedeiros/rocambole) and\n[espree](https://github.com/eslint/espree) to recursively parse the tokens and\ntransform it *in place*.\n\n\n\n## Goals\n\n - *granular* control about white spaces, indent and line breaks.\n - command line interface (cli).\n - be non-destructive.\n - support for local/global config file so settings can be shared between team\n   members.\n - be extensive ([plugins](https://github.com/millermedeiros/esformatter/wiki/Plugins)\n   and other cli tools).\n - support most popular style guides through plugins (Google, jQuery,\n   Idiomatic.js).\n - be the best JavaScript code formatter!\n\n\n\n## API\n\n```js\nvar esformatter = require('esformatter');\nvar fs = require('fs');\nvar codeStr = fs.readFileSync('path/to/js/file.js').toString();\n\n// for a list of available options check \"lib/preset/default.json\"\nvar options = {\n  indent : {\n    value : '  '\n  },\n  lineBreak : {\n    before : {\n      // at least one line break before BlockStatement\n      BlockStatement : '>=1',\n      // only one line break before DoWhileStatementOpeningBrace\n      DoWhileStatementOpeningBrace : 1,\n      // ...\n    }\n  },\n  whiteSpace : {\n    // ...\n  }\n};\n\n// return a string with the formatted code\nvar formattedCode = esformatter.format(codeStr, options);\n```\n\nSee the [doc/api.md](./doc/api.md) file for a list of all the public methods\nand detailed documentation about each one.\n\nSee [doc/config.md](./doc/config.md) for more info about the configuration\noptions.\n\n\n## CLI\n\nYou can also use the simple command line interface to process the `stdin` or\nread from a file.\n\n```sh\nnpm install [-g] esformatter\n```\n\n### Usage:\n\nPass the `--help` flag to see the available options or see\n[doc/cli.txt](./doc/cli.txt).\n\n```sh\nesformatter --help\n```\n\n### Examples:\n\n```sh\n# Format\n# ======\n\n# format \"test.js\" and output result to stdout\nesformatter test.js\n# you can also pipe other shell commands (read file from stdin)\ncat test.js | esformatter\n# format \"test.js\" using options in \"options.json\" and output result to stdout\nesformatter --config options.json test.js\n# process \"test.js\" and writes to \"test.out.js\"\nesformatter test.js > test.out.js\n# you can override the default settings, see lib/preset/default.json for\n# a list of available options\nesformatter test.js --indent.value=\"\\t\" --lineBreak.before.IfStatementOpeningBrace=0\n# format \"test.js\" and output result to \"test.js\"\nesformatter -i test.js\n# format and overwrite all the \".js\" files inside the \"lib/\" folder\nesformatter -i 'lib/*.js'\n# format and overwrite all the \".js\" files inside \"lib/\" and it's subfolders\nesformatter -i 'lib/**/*.js'\n\n**important:** surround the glob with single quotes to avoid expansion; [glob\nsyntax reference](https://github.com/isaacs/node-glob/#glob-primer)\n\n# Diff\n# ======\n\n# check if \"test.js\" matches style and output diff to stdout\nesformatter --diff test.js\n# check if \"test.js\" matches style and output unified diff to stdout\nesformatter --diff-unified test.js\n# check if \"test.js\" matches \"options.json\" style and output diff to stdout\nesformatter --diff --config options.json test.js\n# check all files inside \"lib/\" and it's subfolders\nesformatter --diff 'lib/**/*.js'\n```\n\n### Local version\n\nIf a locally installed `esformatter` is found, the CLI uses that instead of the\nglobal executable (this means you can have multiple projects depending on\ndifferent versions of esformatter).\n\n**protip:** add `esformatter` and all the plugins that you need on your project\nto the [package.json `devDependencies`](https://docs.npmjs.com/files/package.json#devdependencies)\nthat way you can use locally installed plugins and also make sure everyone on\nyour team is using the same version/settings.\n\n```json\n{\n  \"devDependencies\": {\n    \"esformatter\": \"~0.6.0\",\n    \"esformatter-quotes\": \"^1.0.1\"\n  },\n  \"esformatter\": {\n    \"plugins\": [\"esformatter-quotes\"],\n    \"quotes\": {\n      \"type\": \"single\"\n    }\n  }\n}\n```\n\n## Configuration\n\nSee [doc/config.md](./doc/config.md).\n\n\n## Pipe other CLI tools\n\nSince we don't expect everyone to write plugins that only works with\nesformatter we decided to encourage the usage of standalone CLI tools.\n\n```js\n{\n  // pipe is a simple way to \"pipe\" multiple binaries input/output\n  \"pipe\": {\n    // scripts listed as \"before\" will be executed before esformatter\n    // and will forward output to next command in the queue\n    \"before\": [\n      \"strip-debug\",\n      \"./bin/my-custom-script.sh --foo true -zx\"\n    ],\n    // scripts listed as \"after\" will be executed after esformatter\n    \"after\": [\n      \"baz --keepLineBreaks\"\n    ]\n  }\n}\n```\n\n## Plugins\n\nPlugins are automatically loaded from `node_modules` if you pass the module id\nin the config file:\n\n```json\n{\n  \"plugins\": [ \"esformatter-sample-plugin\", \"foobar\" ]\n}\n```\n\nList of plugins and plugins wish list:\nhttps://github.com/millermedeiros/esformatter/wiki/Plugins\n\nList of plugins with easy filterable search:\nhttp://pgilad.github.io/esformatter-plugins/\n\nFor detailed information about plugins structure and API see\n[doc/plugins.md](./doc/plugins.md)\n\n\n## IRC\n\nWe have an IRC channel [#esformatter on\nirc.freenode.net](http://webchat.freenode.net/?channels=esformatter) for quick\ndiscussions about the project development/structure.\n\n\n## Wiki\n\nSee project Wiki for more info: https://github.com/millermedeiros/esformatter/wiki\n\n\n\n## Project structure / Contributing\n\nSee [CONTRIBUTING.md](https://github.com/millermedeiros/esformatter/blob/master/CONTRIBUTING.md)\n\n\n\n## Popular Alternatives\n\n - [jsbeautifier](http://jsbeautifier.org/)\n - [codepainter](https://npmjs.org/package/codepainter)\n - [jscs](http://jscs.info/)\n\n\n\n## License\n\nReleased under the MIT license\n\n\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/millermedeiros/esformatter",
  "_id": "esformatter@0.7.2",
  "_shasum": "2ec11364620cd01259c10ffcd2a3e044626e1598",
  "_from": "esformatter@0.7",
  "_resolved": "https://registry.npmjs.org/esformatter/-/esformatter-0.7.2.tgz"
}
